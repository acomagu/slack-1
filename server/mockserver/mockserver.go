package mockserver

// Auto-generated by internal/cmd/genserver/genserver.go. DO NOT EDIT!

import (
	"bytes"
	"encoding/json"
	"net/http"

	"github.com/lestrrat/go-slack"
	"github.com/lestrrat/go-slack/server"
)

func New() *server.Server {
	s := server.New()
	s.Handle("auth.revoke", http.HandlerFunc(HandleAuthRevoke))
	s.Handle("auth.test", http.HandlerFunc(HandleAuthTest))
	s.Handle("bots.info", http.HandlerFunc(HandleBotsInfo))
	s.Handle("channels.archive", http.HandlerFunc(HandleChannelsArchive))
	s.Handle("channels.create", http.HandlerFunc(HandleChannelsCreate))
	s.Handle("channels.history", http.HandlerFunc(HandleChannelsHistory))
	s.Handle("channels.info", http.HandlerFunc(HandleChannelsInfo))
	s.Handle("channels.invite", http.HandlerFunc(HandleChannelsInvite))
	s.Handle("channels.join", http.HandlerFunc(HandleChannelsJoin))
	s.Handle("channels.kick", http.HandlerFunc(HandleChannelsKick))
	s.Handle("channels.leave", http.HandlerFunc(HandleChannelsLeave))
	s.Handle("channels.list", http.HandlerFunc(HandleChannelsList))
	s.Handle("channels.mark", http.HandlerFunc(HandleChannelsMark))
	s.Handle("channels.rename", http.HandlerFunc(HandleChannelsRename))
	s.Handle("channels.replies", http.HandlerFunc(HandleChannelsReplies))
	s.Handle("channels.setPurpose", http.HandlerFunc(HandleChannelsSetPurpose))
	s.Handle("channels.setTopic", http.HandlerFunc(HandleChannelsSetTopic))
	s.Handle("channels.unarchive", http.HandlerFunc(HandleChannelsUnarchive))
	s.Handle("chat.delete", http.HandlerFunc(HandleChatDelete))
	s.Handle("chat.meMessage", http.HandlerFunc(HandleChatMeMessage))
	s.Handle("chat.postMessage", http.HandlerFunc(HandleChatPostMessage))
	s.Handle("chat.unfurl", http.HandlerFunc(HandleChatUnfurl))
	s.Handle("chat.update", http.HandlerFunc(HandleChatUpdate))
	s.Handle("emoji.list", http.HandlerFunc(HandleEmojiList))
	s.Handle("groups.archive", http.HandlerFunc(HandleGroupsArchive))
	s.Handle("groups.create", http.HandlerFunc(HandleGroupsCreate))
	s.Handle("groups.createChild", http.HandlerFunc(HandleGroupsCreateChild))
	s.Handle("groups.history", http.HandlerFunc(HandleGroupsHistory))
	s.Handle("groups.info", http.HandlerFunc(HandleGroupsInfo))
	s.Handle("groups.invite", http.HandlerFunc(HandleGroupsInvite))
	s.Handle("groups.kick", http.HandlerFunc(HandleGroupsKick))
	s.Handle("groups.leave", http.HandlerFunc(HandleGroupsLeave))
	s.Handle("groups.list", http.HandlerFunc(HandleGroupsList))
	s.Handle("groups.mark", http.HandlerFunc(HandleGroupsMark))
	s.Handle("groups.open", http.HandlerFunc(HandleGroupsOpen))
	s.Handle("groups.rename", http.HandlerFunc(HandleGroupsRename))
	s.Handle("groups.replies", http.HandlerFunc(HandleGroupsReplies))
	s.Handle("groups.setPurpose", http.HandlerFunc(HandleGroupsSetPurpose))
	s.Handle("groups.setTopic", http.HandlerFunc(HandleGroupsSetTopic))
	s.Handle("groups.unarchive", http.HandlerFunc(HandleGroupsUnarchive))
	s.Handle("oauth.access", http.HandlerFunc(HandleOAuthAccess))
	s.Handle("reactions.add", http.HandlerFunc(HandleReactionsAdd))
	s.Handle("reactions.get", http.HandlerFunc(HandleReactionsGet))
	s.Handle("reactions.list", http.HandlerFunc(HandleReactionsList))
	s.Handle("reactions.remove", http.HandlerFunc(HandleReactionsRemove))
	s.Handle("rtm.start", http.HandlerFunc(HandleRTMStart))
	s.Handle("usergroups.create", http.HandlerFunc(HandleUsergroupsCreate))
	s.Handle("usergroups.disable", http.HandlerFunc(HandleUsergroupsDisable))
	s.Handle("usergroups.enable", http.HandlerFunc(HandleUsergroupsEnable))
	s.Handle("usergroups.list", http.HandlerFunc(HandleUsergroupsList))
	s.Handle("usergroups.update", http.HandlerFunc(HandleUsergroupsUpdate))
	s.Handle("usergroups.users.list", http.HandlerFunc(HandleUsergroupsUsersList))
	s.Handle("usergroups.users.update", http.HandlerFunc(HandleUsergroupsUsersUpdate))
	s.Handle("users.deletePhoto", http.HandlerFunc(HandleUsersDeletePhoto))
	s.Handle("users.getPresence", http.HandlerFunc(HandleUsersGetPresence))
	s.Handle("users.identity", http.HandlerFunc(HandleUsersIdentity))
	s.Handle("users.info", http.HandlerFunc(HandleUsersInfo))
	s.Handle("users.list", http.HandlerFunc(HandleUsersList))
	s.Handle("users.profile.get", http.HandlerFunc(HandleUsersProfileGet))
	s.Handle("users.profile.set", http.HandlerFunc(HandleUsersProfileSet))
	s.Handle("users.setActive", http.HandlerFunc(HandleUsersSetActive))
	s.Handle("users.setPresence", http.HandlerFunc(HandleUsersSetPresence))
	return s
}

// HandleAuthRevoke is the default handler method for the Slack auth.revoke API
func HandleAuthRevoke(w http.ResponseWriter, r *http.Request) {
	var c slack.AuthRevokeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleAuthTest is the default handler method for the Slack auth.test API
func HandleAuthTest(w http.ResponseWriter, r *http.Request) {
	var c slack.AuthTestCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleBotsInfo is the default handler method for the Slack bots.info API
func HandleBotsInfo(w http.ResponseWriter, r *http.Request) {
	var c slack.BotsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsArchive is the default handler method for the Slack channels.archive API
func HandleChannelsArchive(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsArchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsCreate is the default handler method for the Slack channels.create API
func HandleChannelsCreate(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsHistory is the default handler method for the Slack channels.history API
func HandleChannelsHistory(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsHistoryCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsInfo is the default handler method for the Slack channels.info API
func HandleChannelsInfo(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(StockChannelResponse); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsInvite is the default handler method for the Slack channels.invite API
func HandleChannelsInvite(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsInviteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsJoin is the default handler method for the Slack channels.join API
func HandleChannelsJoin(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsJoinCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsKick is the default handler method for the Slack channels.kick API
func HandleChannelsKick(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsKickCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsLeave is the default handler method for the Slack channels.leave API
func HandleChannelsLeave(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsLeaveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsList is the default handler method for the Slack channels.list API
func HandleChannelsList(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsMark is the default handler method for the Slack channels.mark API
func HandleChannelsMark(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsMarkCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsRename is the default handler method for the Slack channels.rename API
func HandleChannelsRename(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsRenameCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsReplies is the default handler method for the Slack channels.replies API
func HandleChannelsReplies(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsRepliesCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsSetPurpose is the default handler method for the Slack channels.setPurpose API
func HandleChannelsSetPurpose(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsSetPurposeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsSetTopic is the default handler method for the Slack channels.setTopic API
func HandleChannelsSetTopic(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsSetTopicCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChannelsUnarchive is the default handler method for the Slack channels.unarchive API
func HandleChannelsUnarchive(w http.ResponseWriter, r *http.Request) {
	var c slack.ChannelsUnarchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatDelete is the default handler method for the Slack chat.delete API
func HandleChatDelete(w http.ResponseWriter, r *http.Request) {
	var c slack.ChatDeleteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatMeMessage is the default handler method for the Slack chat.meMessage API
func HandleChatMeMessage(w http.ResponseWriter, r *http.Request) {
	var c slack.ChatMeMessageCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatPostMessage is the default handler method for the Slack chat.postMessage API
func HandleChatPostMessage(w http.ResponseWriter, r *http.Request) {
	var c slack.ChatPostMessageCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatUnfurl is the default handler method for the Slack chat.unfurl API
func HandleChatUnfurl(w http.ResponseWriter, r *http.Request) {
	var c slack.ChatUnfurlCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleChatUpdate is the default handler method for the Slack chat.update API
func HandleChatUpdate(w http.ResponseWriter, r *http.Request) {
	var c slack.ChatUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleEmojiList is the default handler method for the Slack emoji.list API
func HandleEmojiList(w http.ResponseWriter, r *http.Request) {
	var c slack.EmojiListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsArchive is the default handler method for the Slack groups.archive API
func HandleGroupsArchive(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsArchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsCreate is the default handler method for the Slack groups.create API
func HandleGroupsCreate(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsCreateChild is the default handler method for the Slack groups.createChild API
func HandleGroupsCreateChild(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsCreateChildCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsHistory is the default handler method for the Slack groups.history API
func HandleGroupsHistory(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsHistoryCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsInfo is the default handler method for the Slack groups.info API
func HandleGroupsInfo(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsInvite is the default handler method for the Slack groups.invite API
func HandleGroupsInvite(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsInviteCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsKick is the default handler method for the Slack groups.kick API
func HandleGroupsKick(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsKickCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsLeave is the default handler method for the Slack groups.leave API
func HandleGroupsLeave(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsLeaveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsList is the default handler method for the Slack groups.list API
func HandleGroupsList(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsMark is the default handler method for the Slack groups.mark API
func HandleGroupsMark(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsMarkCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsOpen is the default handler method for the Slack groups.open API
func HandleGroupsOpen(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsOpenCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsRename is the default handler method for the Slack groups.rename API
func HandleGroupsRename(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsRenameCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsReplies is the default handler method for the Slack groups.replies API
func HandleGroupsReplies(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsRepliesCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsSetPurpose is the default handler method for the Slack groups.setPurpose API
func HandleGroupsSetPurpose(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsSetPurposeCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsSetTopic is the default handler method for the Slack groups.setTopic API
func HandleGroupsSetTopic(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsSetTopicCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleGroupsUnarchive is the default handler method for the Slack groups.unarchive API
func HandleGroupsUnarchive(w http.ResponseWriter, r *http.Request) {
	var c slack.GroupsUnarchiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleOAuthAccess is the default handler method for the Slack oauth.access API
func HandleOAuthAccess(w http.ResponseWriter, r *http.Request) {
	var c slack.OAuthAccessCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsAdd is the default handler method for the Slack reactions.add API
func HandleReactionsAdd(w http.ResponseWriter, r *http.Request) {
	var c slack.ReactionsAddCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsGet is the default handler method for the Slack reactions.get API
func HandleReactionsGet(w http.ResponseWriter, r *http.Request) {
	var c slack.ReactionsGetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsList is the default handler method for the Slack reactions.list API
func HandleReactionsList(w http.ResponseWriter, r *http.Request) {
	var c slack.ReactionsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleReactionsRemove is the default handler method for the Slack reactions.remove API
func HandleReactionsRemove(w http.ResponseWriter, r *http.Request) {
	var c slack.ReactionsRemoveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleRTMStart is the default handler method for the Slack rtm.start API
func HandleRTMStart(w http.ResponseWriter, r *http.Request) {
	var c slack.RTMStartCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsCreate is the default handler method for the Slack usergroups.create API
func HandleUsergroupsCreate(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsCreateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsDisable is the default handler method for the Slack usergroups.disable API
func HandleUsergroupsDisable(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsDisableCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsEnable is the default handler method for the Slack usergroups.enable API
func HandleUsergroupsEnable(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsEnableCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsList is the default handler method for the Slack usergroups.list API
func HandleUsergroupsList(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUpdate is the default handler method for the Slack usergroups.update API
func HandleUsergroupsUpdate(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUsersList is the default handler method for the Slack usergroups.users.list API
func HandleUsergroupsUsersList(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsUsersListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsergroupsUsersUpdate is the default handler method for the Slack usergroups.users.update API
func HandleUsergroupsUsersUpdate(w http.ResponseWriter, r *http.Request) {
	var c slack.UsergroupsUsersUpdateCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersDeletePhoto is the default handler method for the Slack users.deletePhoto API
func HandleUsersDeletePhoto(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersDeletePhotoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersGetPresence is the default handler method for the Slack users.getPresence API
func HandleUsersGetPresence(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersGetPresenceCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersIdentity is the default handler method for the Slack users.identity API
func HandleUsersIdentity(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersIdentityCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersInfo is the default handler method for the Slack users.info API
func HandleUsersInfo(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersInfoCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersList is the default handler method for the Slack users.list API
func HandleUsersList(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersListCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersProfileGet is the default handler method for the Slack users.profile.get API
func HandleUsersProfileGet(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersProfileGetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersProfileSet is the default handler method for the Slack users.profile.set API
func HandleUsersProfileSet(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersProfileSetCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersSetActive is the default handler method for the Slack users.setActive API
func HandleUsersSetActive(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersSetActiveCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}

// HandleUsersSetPresence is the default handler method for the Slack users.setPresence API
func HandleUsersSetPresence(w http.ResponseWriter, r *http.Request) {
	var c slack.UsersSetPresenceCall
	if err := c.FromValues(r.Form); err != nil {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	var buf bytes.Buffer
	if err := json.NewEncoder(&buf).Encode(slack.SlackResponse{OK: true}); err != nil {
		http.Error(w, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError)
	}
	w.Header().Set(`Content-Type`, `application/json; charset=utf-8`)
	w.WriteHeader(http.StatusOK)
	buf.WriteTo(w)
}
